2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47434409,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 845,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469365592,
  lastCheckTime: 1501469365592 }
2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47434284,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 906,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469365717,
  lastCheckTime: 1501469365717 }
2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47434188,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 943,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469365813,
  lastCheckTime: 1501469365813 }
2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47434013,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1049,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469365988,
  lastCheckTime: 1501469365988 }
2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47433891,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1092,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469366110,
  lastCheckTime: 1501469366110 }
2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47433794,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1109,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469366207,
  lastCheckTime: 1501469366207 }
2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47433700,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1107,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469366301,
  lastCheckTime: 1501469366301 }
2017-07-31 10:49:26 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 47433676,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1036,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501469366325,
  lastCheckTime: 1501469366325 }
2017-07-31 17:14:08 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24351822,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 988,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492448179,
  lastCheckTime: 1501492448179 }
2017-07-31 17:14:08 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24351774,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1030,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492448227,
  lastCheckTime: 1501492448227 }
2017-07-31 17:14:09 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24351304,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1288,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492448697,
  lastCheckTime: 1501492448697 }
2017-07-31 17:14:09 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24351306,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1294,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492448695,
  lastCheckTime: 1501492448695 }
2017-07-31 17:14:09 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24350862,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1496,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492449142,
  lastCheckTime: 1501492449142 }
2017-07-31 17:14:09 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24350870,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1482,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492449131,
  lastCheckTime: 1501492449131 }
2017-07-31 17:14:09 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24350698,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1423,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492449303,
  lastCheckTime: 1501492449303 }
2017-07-31 17:14:09 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24350682,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1419,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492449319,
  lastCheckTime: 1501492449319 }
2017-07-31 17:16:34 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205939,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1002,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594066,
  lastCheckTime: 1501492594066 }
2017-07-31 17:16:34 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205931,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1008,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594070,
  lastCheckTime: 1501492594070 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205461,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1275,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594540,
  lastCheckTime: 1501492594540 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205457,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1272,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594544,
  lastCheckTime: 1501492594544 }
2017-07-31 17:16:34 +08:00: { errors: null }
2017-07-31 17:16:34 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205931,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1008,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594070,
  lastCheckTime: 1501492594070 }
2017-07-31 17:16:34 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205931,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1008,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594070,
  lastCheckTime: 1501492594070 }
2017-07-31 17:16:34 +08:00: { errors: null }
2017-07-31 17:16:34 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205939,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1002,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594066,
  lastCheckTime: 1501492594066 }
2017-07-31 17:16:34 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205939,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1002,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594066,
  lastCheckTime: 1501492594066 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205203,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1311,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594798,
  lastCheckTime: 1501492594798 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205181,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1323,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594820,
  lastCheckTime: 1501492594820 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24204971,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1295,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492595030,
  lastCheckTime: 1501492595030 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24204947,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1303,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492595055,
  lastCheckTime: 1501492595055 }
2017-07-31 17:16:35 +08:00: { errors: null }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205461,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1275,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594540,
  lastCheckTime: 1501492594540 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205461,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1275,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594540,
  lastCheckTime: 1501492594540 }
2017-07-31 17:16:35 +08:00: { errors: null }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205457,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1272,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594544,
  lastCheckTime: 1501492594544 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205457,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1272,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594544,
  lastCheckTime: 1501492594544 }
2017-07-31 17:16:35 +08:00: { errors: null }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205203,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1311,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594798,
  lastCheckTime: 1501492594798 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205203,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1311,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594798,
  lastCheckTime: 1501492594798 }
2017-07-31 17:16:35 +08:00: { errors: null }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205181,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1323,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594820,
  lastCheckTime: 1501492594820 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24205181,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1323,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492594820,
  lastCheckTime: 1501492594820 }
2017-07-31 17:16:35 +08:00: { errors: null }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24204971,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1295,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492595030,
  lastCheckTime: 1501492595030 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24204971,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1295,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492595030,
  lastCheckTime: 1501492595030 }
2017-07-31 17:16:35 +08:00: { errors: null }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24204947,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1303,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492595055,
  lastCheckTime: 1501492595055 }
2017-07-31 17:16:35 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24204947,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1303,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492595055,
  lastCheckTime: 1501492595055 }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24188353,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 953,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492611648,
  lastCheckTime: 1501492611648 }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24188293,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1016,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492611708,
  lastCheckTime: 1501492611708 }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24187877,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1228,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492612124,
  lastCheckTime: 1501492612124 }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24187855,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1252,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492612146,
  lastCheckTime: 1501492612146 }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24187652,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1243,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492612349,
  lastCheckTime: 1501492612349 }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24187657,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1222,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492612344,
  lastCheckTime: 1501492612344 }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24187454,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1170,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492612547,
  lastCheckTime: 1501492612547 }
2017-07-31 17:16:52 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24187480,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1164,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492612521,
  lastCheckTime: 1501492612521 }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:16:52 +08:00: { errors: null }
2017-07-31 17:17:40 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24139936,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1028,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492660065,
  lastCheckTime: 1501492660065 }
2017-07-31 17:17:40 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24139935,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1024,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492660066,
  lastCheckTime: 1501492660066 }
2017-07-31 17:17:40 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24139634,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1124,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492660371,
  lastCheckTime: 1501492660371 }
2017-07-31 17:17:41 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24139590,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1165,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492660411,
  lastCheckTime: 1501492660411 }
2017-07-31 17:17:41 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24139208,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1300,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492660794,
  lastCheckTime: 1501492660794 }
2017-07-31 17:17:41 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24139078,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1434,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492660923,
  lastCheckTime: 1501492660923 }
2017-07-31 17:17:41 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24138969,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1301,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492661032,
  lastCheckTime: 1501492661032 }
2017-07-31 17:17:41 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24138937,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1308,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492661064,
  lastCheckTime: 1501492661064 }
2017-07-31 17:18:43 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24077475,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 947,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492722526,
  lastCheckTime: 1501492722526 }
2017-07-31 17:18:43 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24077431,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 988,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492722570,
  lastCheckTime: 1501492722570 }
2017-07-31 17:18:43 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24076912,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1306,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492723089,
  lastCheckTime: 1501492723089 }
2017-07-31 17:18:43 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24076926,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1288,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492723075,
  lastCheckTime: 1501492723075 }
2017-07-31 17:18:43 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24076657,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1349,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492723344,
  lastCheckTime: 1501492723344 }
2017-07-31 17:18:43 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24076643,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1345,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492723358,
  lastCheckTime: 1501492723358 }
2017-07-31 17:18:44 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24076442,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1322,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492723559,
  lastCheckTime: 1501492723559 }
2017-07-31 17:18:44 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24076436,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1310,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492723565,
  lastCheckTime: 1501492723565 }
2017-07-31 17:19:21 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24039002,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 899,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492760999,
  lastCheckTime: 1501492760999 }
2017-07-31 17:19:21 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24039027,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 878,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492760974,
  lastCheckTime: 1501492760974 }
2017-07-31 17:19:21 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24039027,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 878,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492760974,
  lastCheckTime: 1501492760974 }
2017-07-31 17:19:21 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24039002,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 899,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492760999,
  lastCheckTime: 1501492760999 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038552,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1145,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761449,
  lastCheckTime: 1501492761449 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038518,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1183,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761483,
  lastCheckTime: 1501492761483 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038552,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1145,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761449,
  lastCheckTime: 1501492761449 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038518,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1183,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761483,
  lastCheckTime: 1501492761483 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038150,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1330,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761852,
  lastCheckTime: 1501492761852 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038150,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1330,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761852,
  lastCheckTime: 1501492761852 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038141,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1329,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761862,
  lastCheckTime: 1501492761862 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24038141,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1329,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492761862,
  lastCheckTime: 1501492761862 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24037960,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1270,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492762041,
  lastCheckTime: 1501492762041 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24037960,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1270,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492762041,
  lastCheckTime: 1501492762041 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24037924,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1289,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492762076,
  lastCheckTime: 1501492762076 }
2017-07-31 17:19:22 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 24037924,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1289,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492762076,
  lastCheckTime: 1501492762076 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23892004,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 936,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492907997,
  lastCheckTime: 1501492907997 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23892004,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 936,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492907997,
  lastCheckTime: 1501492907997 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23892036,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 901,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492907965,
  lastCheckTime: 1501492907965 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23892036,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 901,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492907965,
  lastCheckTime: 1501492907965 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891609,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1132,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908392,
  lastCheckTime: 1501492908392 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891584,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1148,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908417,
  lastCheckTime: 1501492908417 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891609,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1132,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908392,
  lastCheckTime: 1501492908392 }
2017-07-31 17:21:48 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891584,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1148,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908417,
  lastCheckTime: 1501492908417 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891335,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1184,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908666,
  lastCheckTime: 1501492908666 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891335,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1184,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908666,
  lastCheckTime: 1501492908666 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891312,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1205,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908689,
  lastCheckTime: 1501492908689 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891312,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1205,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908689,
  lastCheckTime: 1501492908689 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891187,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1105,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908814,
  lastCheckTime: 1501492908814 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891187,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1105,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908814,
  lastCheckTime: 1501492908814 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891169,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1102,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908832,
  lastCheckTime: 1501492908832 }
2017-07-31 17:21:49 +08:00: JustLog {
  options: 
   { encoding: 'utf-8',
     placeholder: '-',
     file: 
      { level: 13,
        pattern: 'file',
        path: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
        mode: '0664',
        dir_mode: '2775',
        _watcher_timeout: 5007,
        render: [Object] },
     stdio: 
      { level: 15,
        pattern: 'color',
        stdout: [Object],
        stderr: [Object],
        render: [Object] },
     duration: 1000,
     bufferLength: 0 },
  INFO: 1,
  DEBUG: 2,
  WARN: 4,
  ERROR: 8,
  ALL: 15,
  EXCEPTION: 12,
  file: 
   { path: '/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@2017-07-31.log',
     stream: 
      FileStream {
        options: [Object],
        _buffer: [],
        stream: [Object],
        _events: [Object],
        _eventsCount: 2 },
     timer: 
      Timeout {
        _called: false,
        _idleTimeout: 23891169,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1102,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null },
     opening: true,
     watcher: null,
     ino: null },
  closed: false,
  stdout: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 1,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  stderr: 
   SyncWriteStream {
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     domain: null,
     _events: { end: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     fd: 2,
     readable: false,
     autoClose: false,
     _type: 'fs',
     _isStdio: true,
     destroySoon: [Function],
     destroy: [Function],
     write: [Function] },
  info: [Function: bound ],
  debug: [Function: bound ],
  warn: [Function: bound ],
  error: [Function: bound ],
  lastFlushTime: 1501492908832,
  lastCheckTime: 1501492908832 }
2017-07-31 17:46:17 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:17 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:17 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:17 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:18 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:18 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:18 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:18 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:18 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:18 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:18 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:18 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:18 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:18 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:18 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:18 +08:00: ----------
2017-07-31 17:46:18 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:32 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:32 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:32 +08:00: ----------
2017-07-31 17:46:32 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:32 +08:00: ----------
2017-07-31 17:46:32 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:32 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:32 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:32 +08:00: ----------
2017-07-31 17:46:33 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:32 +08:00: ----------
2017-07-31 17:46:33 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:33 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:33 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:33 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:33 +08:00: ----------
2017-07-31 17:46:33 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:33 +08:00: ----------
2017-07-31 17:46:33 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:33 +08:00: ----------
2017-07-31 17:46:33 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:46:33 +08:00: run with cb, but cb was not a function
2017-07-31 17:46:33 +08:00: ----------
2017-07-31 17:46:33 +08:00: Error: run with cb, but cb was not a function
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:08 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:08 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:08 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:08 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:09 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:09 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:09 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:09 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:09 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:09 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:09 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:09 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:47:09 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:09 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:09 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:47:09 +08:00: ----------
2017-07-31 17:47:09 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:21 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:21 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:21 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:21 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:21 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:21 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:22 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:49:21 +08:00: ----------
2017-07-31 17:49:22 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:42:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:41 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:41 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:41 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:41 +08:00: ----------
2017-07-31 17:50:41 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:41 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:41 +08:00: ----------
2017-07-31 17:50:41 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:41 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:41 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:41 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:42 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:41 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:41 +08:00: ----------
2017-07-31 17:50:42 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:41 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:41 +08:00: ----------
2017-07-31 17:50:42 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:42 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:42 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:50:41 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:41 +08:00: ----------
2017-07-31 17:50:42 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:42 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:42 +08:00: ----------
2017-07-31 17:50:42 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:42 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:42 +08:00: ----------
2017-07-31 17:50:42 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:50:42 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:50:42 +08:00: ----------
2017-07-31 17:50:42 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:24 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:24 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:24 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:24 +08:00: ----------
2017-07-31 17:51:24 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:24 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:24 +08:00: ----------
2017-07-31 17:51:24 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:24 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:24 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:25 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:24 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:24 +08:00: ----------
2017-07-31 17:51:25 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:25 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:24 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:24 +08:00: ----------
2017-07-31 17:51:25 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:25 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:25 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:25 +08:00: ----------
2017-07-31 17:51:25 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:25 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:25 +08:00: ----------
2017-07-31 17:51:25 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:25 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:51:25 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:25 +08:00: ----------
2017-07-31 17:51:25 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:51:25 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:51:25 +08:00: ----------
2017-07-31 17:51:25 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:13 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:13 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:13 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:13 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:13 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:13 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:14 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:14 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:14 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:14 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:14 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:14 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:14 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:14 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:14 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:14 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:52:14 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:14 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:14 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:14 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:14 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:14 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:52:14 +08:00: run with cb, but cb was not a function, cb : [undefined]
2017-07-31 17:52:14 +08:00: ----------
2017-07-31 17:52:14 +08:00: Error: run with cb, but cb was not a function, cb : [undefined]
  at App.run (/Users/Pon/Documents/Project/financial-private-group/runner/hc-cover-runner/lib/app.coffee:310:17)
  at Object.start (/Users/Pon/Documents/Project/financial-private-group/lib/engine.coffee:43:13)
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/lib/worker.js:17:10)
  at Module._compile (module.js:570:32)
  at Object.Module._extensions..js (module.js:579:10)
  at Module.load (module.js:487:32)
  at tryModuleLoad (module.js:446:12)
  at Function.Module._load (module.js:438:3)
  at Function._load (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/pmx/lib/transaction.js:62:21)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/ProcessContainer.js:260:23
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:52:16
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/node_modules/async/lib/async.js:1209:30
  at WriteStream.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/pm2/lib/Utility.js:146:13)
  at emitOne (events.js:96:13)
  at WriteStream.emit (events.js:188:7)
  at WriteStream.<anonymous> (fs.js:2114:10)
  at FSReqWrap.oncomplete (fs.js:123:15)

2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: { dir: '/Users/Pon/Documents/Project/financial-private-group',
  logPath: '[/Users/Pon/Documents/Project/financial-private-group/log/fpg@1.0.0@]YYYY-MM-DD[.log]',
  appname: 'fpg@1.0.0',
  logsDir: '/Users/Pon/Documents/Project/financial-private-group/log' }
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:54:06 +08:00: undefined
2017-07-31 17:58:47 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:47 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:47 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-07-31 17:58:47 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:47 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:47 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-07-31 17:58:47 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:47 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:47 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-07-31 17:58:47 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:47 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:47 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-07-31 17:58:47 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:47 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:47 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:47 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-07-31 17:58:47 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:47 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-07-31 17:58:48 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:48 +08:00: all function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } / function (req, resp, next) {
          var end;
          req.__justLogStartTime = new Date;
          end = resp.end;
          if (options.traceid) {
            resp.__justLogTraceId = req.__justLogTraceId = getTraceId(req);
          }
          resp.end = function(chunk, encoding) {
            resp.end = end;
            resp.end(chunk, encoding);
            return log.info({
              'remote-address': req.socket.remoteAddress,
              'remote-port': req.socket.remotePort,
              method: req.method,
              url: req.originalUrl || req.url,
              version: req.httpVersionMajor + '.' + req.httpVersionMinor,
              status: resp.statusCode,
              'content-length': parseInt(resp.getHeader('content-length'), 10),
              headers: req.headers,
              rt: new Date() - req.__justLogStartTime,
              traceid: req.__justLogTraceId
            });
          };
          return next();
        }
2017-07-31 17:58:48 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:48 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-07-31 17:58:48 +08:00: get function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group/test function* ( req, res, next ) {
      let permissions = req.permission;
      let user        = req.user;
      let userId      = user.id;
      
      let groups      = groupModule.getGroups( userId );

      res.data( groups );

    }
2017-07-31 17:58:48 +08:00: post function (path, fn, opt) {
      var re, reqParams, source;
      source = path;
      if ('\/' === path[path.length - 1]) {
        path = path.substr(0, path.length - 1);
      }
      re = pathToRegexp(path, opt);
      reqParams = path.match(/\:\w+\/?/g);
      if (null !== reqParams) {
        reqParams = reqParams.map(function(val) {
          var bb, ff;
          ff = 0;
          bb = val.length;
          if (0 === val.indexOf('\/\:')) {
            ff = 2;
          } else if (0 === val.indexOf('\:')) {
            ff = 1;
          }
          if (val.length - 1 === val.lastIndexOf('\/')) {
            bb -= 1;
          }
          return val.substring(ff, bb);
        });
      }
      if ('GeneratorFunction' === fn.constructor.name) {
        return function*() {
          var args, i, next, req;
          args = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), next = arguments[i++];
          req = (this || {}).req;
          if (req == null) {
            req = args[0];
          }
          if (!matchMethod(req, method)) {
            return (yield next);
          }
          args.push(next);
          if (true === matchPath(req, re, reqParams, source)) {
            (yield fn.apply(this, args));
            return;
          }
          return (yield next);
        };
      } else {
        return function(req, res, next) {
          if (!matchMethod(req, method)) {
            return next();
          }
          if (true === matchPath(req, re, reqParams, source)) {
            fn(req, res, next);
            return;
          }
          return next();
        };
      }
    } /group function* ( req, res, next ) {
      let user  = req.user;
      let id    = user.id;
      let query = req.query;
      let name  = query.name;
      let type  = 1;

      yield groupModule.createGroup( id, name, type );

      res.data( 'ok' );
    }
2017-08-01 10:37:52 +08:00: path.match is not a function TypeError: path.match is not a function
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/cover-router/lib/index.coffee:78:22
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/thunkify/index.js:43:12)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:135:8
  at Object.thunkToPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:134:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:118:55)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.createPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:30:15)
  at Server.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/lib/index.coffee:56:10)
  at emitTwo (events.js:106:13)
  at Server.emit (events.js:191:7)
  at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:546:12)
  at HTTPParser.parserOnHeadersComplete (_http_common.js:99:23)

2017-08-01 10:39:23 +08:00: IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 617,
        _externalStream: {},
        fd: 16,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4328,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData] } },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 617,
        _externalStream: {},
        fd: 16,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4328,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData] } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { host: '127.0.0.1:8080',
     connection: 'keep-alive',
     'cache-control': 'max-age=0',
     'upgrade-insecure-requests': '1',
     'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2',
     cookie: 'test=1234; _med=dw:1280&dh:800&pw:2560&ph:1600&ist:0; cq=ccp%3D1; _ga=GA1.1.232253140.1496213540; Hm_lvt_843c2a3226de23e0cfbb9668a390e06f=1496213608' },
  rawHeaders: 
   [ 'Host',
     '127.0.0.1:8080',
     'Connection',
     'keep-alive',
     'Cache-Control',
     'max-age=0',
     'Upgrade-Insecure-Requests',
     '1',
     'User-Agent',
     'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
     'Accept',
     'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2',
     'Cookie',
     'test=1234; _med=dw:1280&dh:800&pw:2560&ph:1600&ist:0; cq=ccp%3D1; _ga=GA1.1.232253140.1496213540; Hm_lvt_843c2a3226de23e0cfbb9668a390e06f=1496213608' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/group/test',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 617,
        _externalStream: {},
        fd: 16,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4328,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData] } },
  _consuming: false,
  _dumped: false } '====='
2017-08-01 10:39:23 +08:00: path.match is not a function TypeError: path.match is not a function
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/cover-router/lib/index.coffee:79:22
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/thunkify/index.js:43:12)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:135:8
  at Object.thunkToPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:134:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:118:55)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.createPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:30:15)
  at Server.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/lib/index.coffee:56:10)
  at emitTwo (events.js:106:13)
  at Server.emit (events.js:191:7)
  at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:546:12)
  at HTTPParser.parserOnHeadersComplete (_http_common.js:99:23)

2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:27 +08:00: [Function] '===='
2017-08-01 10:42:30 +08:00: IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 617,
        _externalStream: {},
        fd: 16,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4453,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData] } },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 617,
        _externalStream: {},
        fd: 16,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4453,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData] } },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { host: '127.0.0.1:8080',
     connection: 'keep-alive',
     'cache-control': 'max-age=0',
     'upgrade-insecure-requests': '1',
     'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
     accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2',
     cookie: 'test=1234; _med=dw:1280&dh:800&pw:2560&ph:1600&ist:0; cq=ccp%3D1; _ga=GA1.1.232253140.1496213540; Hm_lvt_843c2a3226de23e0cfbb9668a390e06f=1496213608' },
  rawHeaders: 
   [ 'Host',
     '127.0.0.1:8080',
     'Connection',
     'keep-alive',
     'Cache-Control',
     'max-age=0',
     'Upgrade-Insecure-Requests',
     '1',
     'User-Agent',
     'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36',
     'Accept',
     'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'zh-CN,zh;q=0.8,en;q=0.6,ja;q=0.4,zh-TW;q=0.2',
     'Cookie',
     'test=1234; _med=dw:1280&dh:800&pw:2560&ph:1600&ist:0; cq=ccp%3D1; _ga=GA1.1.232253140.1496213540; Hm_lvt_843c2a3226de23e0cfbb9668a390e06f=1496213608' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/group/test',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 617,
        _externalStream: {},
        fd: 16,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0 },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function: socketOnError],
        close: [Object],
        data: [Function: socketOnData],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '4:null:8080' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000 },
     _idleStart: 4453,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: [Function: updateOutgoingData] } },
  _consuming: false,
  _dumped: false } '====='
2017-08-01 10:42:30 +08:00: path.match is not a function TypeError: path.match is not a function
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/cover-router/lib/index.coffee:80:22
  at Object.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/thunkify/index.js:43:12)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:135:8
  at Object.thunkToPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:134:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:118:55)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.createPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:30:15)
  at Server.<anonymous> (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/lib/index.coffee:56:10)
  at emitTwo (events.js:106:13)
  at Server.emit (events.js:191:7)
  at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:546:12)
  at HTTPParser.parserOnHeadersComplete (_http_common.js:99:23)

2017-08-01 10:47:40 +08:00:  =====
2017-08-01 10:47:40 +08:00: /group/test =====
2017-08-01 10:47:40 +08:00: /group =====
2017-08-01 10:47:41 +08:00:  =====
2017-08-01 10:47:41 +08:00: /group/test =====
2017-08-01 10:47:41 +08:00: /group =====
2017-08-01 10:47:41 +08:00:  =====
2017-08-01 10:47:41 +08:00:  =====
2017-08-01 10:47:41 +08:00: /group/test =====
2017-08-01 10:47:41 +08:00: /group =====
2017-08-01 10:47:41 +08:00: /group/test =====
2017-08-01 10:47:41 +08:00: /group =====
2017-08-01 10:47:41 +08:00:  =====
2017-08-01 10:47:41 +08:00: /group/test =====
2017-08-01 10:47:41 +08:00: /group =====
2017-08-01 10:47:41 +08:00:  =====
2017-08-01 10:47:41 +08:00: /group/test =====
2017-08-01 10:47:41 +08:00: /group =====
2017-08-01 10:47:41 +08:00:  =====
2017-08-01 10:47:41 +08:00:  =====
2017-08-01 10:47:41 +08:00: /group/test =====
2017-08-01 10:47:41 +08:00: /group =====
2017-08-01 10:47:41 +08:00: /group/test =====
2017-08-01 10:47:41 +08:00: /group =====
2017-08-01 10:47:53 +08:00: Cannot read property 'id' of undefined TypeError: Cannot read property 'id' of undefined
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/group.js:37:29
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00:  =====
2017-08-01 10:48:08 +08:00: /group/test =====
2017-08-01 10:48:08 +08:00: /group =====
2017-08-01 10:50:22 +08:00: Cannot read property 'id' of undefined TypeError: Cannot read property 'id' of undefined
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/group.js:40:29
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 10:50:52 +08:00: res.data is not a function TypeError: res.data is not a function
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/group.js:44:11
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 10:51:11 +08:00: Cannot read property 'undefined' of null TypeError: Cannot read property 'undefined' of null
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/error.js:43:35
  at undefined.throw (native)
  at onRejected (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:80:24)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 10:51:47 +08:00: TypeError: res.data is not a function
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/group.js:44:11
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 10:51:48 +08:00: Cannot read property 'undefined' of null TypeError: Cannot read property 'undefined' of null
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/error.js:44:35
  at undefined.throw (native)
  at onRejected (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:80:24)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:15:47 +08:00: TypeError: Cannot read property 'id' of undefined
  at /Users/Pon/Documents/Project/financial-private-group/src/middlewares/permission.js:19:29
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:15:47 +08:00: Cannot read property 'undefined' of null TypeError: Cannot read property 'undefined' of null
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/error.js:44:35
  at undefined.throw (native)
  at onRejected (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:80:24)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:25:33 +08:00: TypeError: Cannot read property 'getConnection' of null
  at Db._getConnection (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:234:21)
  at Db._wrapQuery (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:274:19)
  at Db.query (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:97:17)
  at Group.getGroups (/Users/Pon/Documents/Project/financial-private-group/src/modules/group.js:18:8)
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:25:33 +08:00: Cannot read property 'undefined' of null TypeError: Cannot read property 'undefined' of null
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/error.js:44:35
  at undefined.throw (native)
  at onRejected (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:80:24)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:26:47 +08:00: TypeError: Cannot read property 'getConnection' of null
  at Db._getConnection (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:234:21)
  at Db._wrapQuery (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:274:19)
  at Db.query (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:97:17)
  at Group.getGroups (/Users/Pon/Documents/Project/financial-private-group/src/modules/group.js:18:8)
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:26:47 +08:00: Cannot read property 'undefined' of null TypeError: Cannot read property 'undefined' of null
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/error.js:44:35
  at undefined.throw (native)
  at onRejected (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:80:24)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:26:49 +08:00: TypeError: Cannot read property 'getConnection' of null
  at Db._getConnection (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:234:21)
  at Db._wrapQuery (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:274:19)
  at Db.query (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:97:17)
  at Group.getGroups (/Users/Pon/Documents/Project/financial-private-group/src/modules/group.js:18:8)
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:26:49 +08:00: Cannot read property 'undefined' of null TypeError: Cannot read property 'undefined' of null
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/error.js:44:35
  at undefined.throw (native)
  at onRejected (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:80:24)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:27:32 +08:00: TypeError: Cannot read property 'getConnection' of null
  at Db._getConnection (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:234:21)
  at Db._wrapQuery (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:274:19)
  at Db.query (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:97:17)
  at Group.getGroups (/Users/Pon/Documents/Project/financial-private-group/src/modules/group.js:18:8)
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:27:32 +08:00: Cannot read property 'undefined' of null TypeError: Cannot read property 'undefined' of null
  at /Users/Pon/Documents/Project/financial-private-group/src/controllers/error.js:44:35
  at undefined.throw (native)
  at onRejected (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:80:24)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:28:24 +08:00: TypeError: Cannot read property 'getConnection' of null
  at Db._getConnection (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:234:21)
  at Db._wrapQuery (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:274:19)
  at Db.query (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:97:17)
  at Group.getGroups (/Users/Pon/Documents/Project/financial-private-group/src/modules/group.js:18:8)
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:28:26 +08:00: TypeError: Cannot read property 'getConnection' of null
  at Db._getConnection (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:234:21)
  at Db._wrapQuery (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:274:19)
  at Db.query (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:97:17)
  at Group.getGroups (/Users/Pon/Documents/Project/financial-private-group/src/modules/group.js:18:8)
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:28:57 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:57 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:57 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:57 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:58 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:58 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:58 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:58 +08:00: { UNKNOW: { message: 'test', code: 1000 } }
2017-08-01 11:28:58 +08:00: TypeError: Cannot read property 'getConnection' of null
  at Db._getConnection (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:234:21)
  at Db._wrapQuery (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:274:19)
  at Db.query (/Users/Pon/Documents/Project/financial-private-group/node_modules/fresh-mysql/index.js:97:17)
  at Group.getGroups (/Users/Pon/Documents/Project/financial-private-group/src/modules/group.js:18:8)
  at undefined.next (native)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:64:19)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at /Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:53:5
  at Object.co (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:49:10)
  at Object.toPromise (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:117:63)
  at next (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:98:29)
  at onFulfilled (/Users/Pon/Documents/Project/financial-private-group/node_modules/node-cover/node_modules/co/index.js:68:7)
  at process._tickDomainCallback (internal/process/next_tick.js:129:7)

2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:29:52 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:12 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:12 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:13 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:13 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:13 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:13 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:13 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:13 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:43 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:43 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:44 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:44 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:44 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:44 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:44 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:30:44 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:11 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:21 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:21 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:21 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:21 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:22 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:22 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:22 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:22 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:32:55 +08:00: { UNKNOW_ERROR: { message: 'test', code: 1000 } }
2017-08-01 11:33:22 +08:00: 111
2017-08-01 11:33:22 +08:00: 111
2017-08-01 11:33:22 +08:00: 111
2017-08-01 11:33:22 +08:00: 111
2017-08-01 11:33:22 +08:00: 111
2017-08-01 11:33:22 +08:00: 111
2017-08-01 11:33:23 +08:00: 111
2017-08-01 11:33:23 +08:00: 111
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:10 +08:00: 11
2017-08-01 11:34:39 +08:00: 11
2017-08-01 11:36:08 +08:00: 11
2017-08-01 11:36:38 +08:00: 11
2017-08-01 11:36:38 +08:00: { host: 'rm-bp1kh3767gf39m4u2o.mysql.rds.aliyuncs.com',
  port: 3306,
  user: 'fpg',
  password: 'Hello1234',
  database: 'fpg',
  showLog: false }
2017-08-01 11:36:46 +08:00: 11
2017-08-01 11:36:46 +08:00: { host: 'rm-bp1kh3767gf39m4u2o.mysql.rds.aliyuncs.com',
  port: 3306,
  user: 'fpg',
  password: 'Hello1234',
  database: 'fpg',
  showLog: false }
2017-08-01 11:36:56 +08:00: 11
2017-08-01 11:36:56 +08:00: { host: 'rm-bp1kh3767gf39m4u2o.mysql.rds.aliyuncs.com',
  port: 3306,
  user: 'fpg',
  password: 'Hello1234',
  database: 'fpg',
  showLog: false }
2017-08-01 11:37:17 +08:00: 11
2017-08-01 11:37:23 +08:00: 11
2017-08-01 11:37:26 +08:00: 11
2017-08-01 11:37:28 +08:00: 11
2017-08-01 11:37:29 +08:00: 11
2017-08-01 11:37:30 +08:00: 11
2017-08-01 11:39:47 +08:00: 11
2017-08-01 11:40:22 +08:00: 11
2017-08-01 11:51:43 +08:00: 11
2017-08-01 11:53:51 +08:00: 11
2017-08-01 11:54:00 +08:00: 11
2017-08-01 14:35:19 +08:00: 11
2017-08-01 14:38:12 +08:00: { test: '123' }
2017-08-01 14:38:52 +08:00: { test: '123' }
2017-08-01 14:53:54 +08:00: { test: '123' }
2017-08-01 14:54:42 +08:00: { name: '测试', type: '1' }
2017-08-02 15:01:05 +08:00: 15:01:05 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m -
2017-08-02 15:01:10 +08:00: 15:01:10 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m -
2017-08-02 15:02:49 +08:00: 15:02:49 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m -
2017-08-02 15:05:08 +08:00: 15:05:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:05:14 +08:00: 15:05:14 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  name,\n  uuid\nFROM\n  user\nWHERE\n  user_id = 1;\n"}
2017-08-02 15:05:36 +08:00: 15:05:36 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:05:37 +08:00: 15:05:37 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id = 1;\n"}
2017-08-02 15:05:37 +08:00: 15:05:37 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[]}"}
2017-08-02 15:05:37 +08:00: 15:05:37 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST"}
2017-08-02 15:07:53 +08:00: 15:07:53 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:07:54 +08:00: 15:07:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id = 1;\n"}
2017-08-02 15:07:54 +08:00: 15:07:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[]}"}
2017-08-02 15:07:54 +08:00: 0000
2017-08-02 15:07:54 +08:00: 15:07:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST"}
2017-08-02 15:09:44 +08:00: 15:09:44 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:09:54 +08:00: 15:09:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:09:54 +08:00: 15:09:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[]}"}
2017-08-02 15:09:54 +08:00: 0000
2017-08-02 15:09:54 +08:00: 15:09:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nINSERT INTO user (\n  user_id,\n  uuid\n)\nVALUES (\n  1,\n  UUID()\n);\n"}
2017-08-02 15:09:54 +08:00: 15:09:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":{\"fieldCount\":0,\"affectedRows\":1,\"insertId\":2,\"serverStatus\":2,\"warningCount\":0,\"message\":\"\",\"protocol41\":true,\"changedRows\":0}}"}
2017-08-02 15:09:54 +08:00: 111
2017-08-02 15:09:54 +08:00: 15:09:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:09:54 +08:00: 15:09:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:09:54 +08:00: 222
2017-08-02 15:09:54 +08:00: 15:09:54 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST"}
2017-08-02 15:10:40 +08:00: 15:10:40 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:10:41 +08:00: 15:10:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:10:41 +08:00: 15:10:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:10:41 +08:00: 111
2017-08-02 15:10:41 +08:00: 15:10:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:10:41 +08:00: 15:10:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:10:41 +08:00: 222
2017-08-02 15:10:41 +08:00: 15:10:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST"}
2017-08-02 15:13:10 +08:00: 15:13:10 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:13:11 +08:00: 15:13:11 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:13:12 +08:00: 15:13:11 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:13:12 +08:00: 111
2017-08-02 15:13:12 +08:00: 15:13:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:12 +08:00: 15:13:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:13:12 +08:00: 222
2017-08-02 15:13:12 +08:00: 15:13:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:12 +08:00: 15:13:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:13:12 +08:00: 15:13:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:12 +08:00: 15:13:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:13:12 +08:00: 333
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:13:31 +08:00: 111
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:13:31 +08:00: 222
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:31 +08:00: 15:13:31 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:13:31 +08:00: 333
2017-08-02 15:13:57 +08:00: 15:13:57 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:13:58 +08:00: 111
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:13:58 +08:00: 222
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:13:58 +08:00: 333
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:13:58 +08:00: 15:13:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:14:21 +08:00: 15:14:21 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:14:26 +08:00: 111
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:14:26 +08:00: 222
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:14:26 +08:00: 333
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:14:26 +08:00: 15:14:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:14:41 +08:00: 15:14:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:15:12 +08:00: 111
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:15:12 +08:00: 222
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:15:12 +08:00: 333
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:15:12 +08:00: 15:15:12 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:15:36 +08:00: 15:15:36 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:16:35 +08:00: 111
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:16:35 +08:00: 222
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:16:35 +08:00: 333
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:16:35 +08:00: 15:16:35 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:16:57 +08:00: 15:16:57 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:21:56 +08:00: 15:21:56 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:22:18 +08:00: 15:22:18 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:24:37 +08:00: 15:24:37 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:24:41 +08:00: 15:24:41 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:24:58 +08:00: 15:24:58 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:25:45 +08:00: 15:25:45 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:25:48 +08:00: 15:25:48 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:26:15 +08:00: 15:26:15 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:26:15 +08:00: 15:26:15 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:26:15 +08:00: 15:26:15 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:26:15 +08:00: 15:26:15 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:26:15 +08:00: 15:26:15 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:26:15 +08:00: 15:26:15 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:26:39 +08:00: 15:26:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:26:42 +08:00: 1111
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:26:42 +08:00: 15:26:42 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:27:08 +08:00: 1111
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:27:08 +08:00: 15:27:08 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:27:08 +08:00: [ RowDataPacket { user_id: 1, role_id: 1, group_id: null } ]
2017-08-02 15:28:37 +08:00: 15:28:37 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:28:39 +08:00: 1111
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:28:39 +08:00: [ RowDataPacket { user_id: 1, role_id: 1, group_id: null } ]
2017-08-02 15:28:39 +08:00: { undefined: [] }
2017-08-02 15:28:39 +08:00: 12345
2017-08-02 15:28:39 +08:00: { undefined: {}, all: [] }
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  groups.name         AS group_name,\n  groups.type         AS group_type,\n  groups.announcement AS group_announcement,\n  groups.user_id      AS group_owner,\n  groups.id           AS group_id,\n  groups.uuid         AS uuid,\n  groups.allow_post   AS allow_post\nFROM\n  groups\nLEFT JOIN\n  group_user\nON\n  group_user.group_id   = groups.id\nWHERE\n  group_user.id         = 1 AND\n  group_user.is_deleted = 0 AND\n  groups.is_deleted     = 0\nORDER BY\n  groups.create_time DESC;\n"}
2017-08-02 15:28:39 +08:00: 15:28:39 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"group_name\":\"test\",\"group_type\":0,\"group_announcement\":null,\"group_owner\":1,\"group_id\":1,\"uuid\":null,\"allow_post\":0}]}"}
2017-08-02 15:29:21 +08:00: 15:29:21 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:29:26 +08:00: 1111
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:29:26 +08:00: [ RowDataPacket { user_id: 1, role_id: 1, group_id: null } ]
2017-08-02 15:29:26 +08:00: { null: [] }
2017-08-02 15:29:26 +08:00: 12345
2017-08-02 15:29:26 +08:00: { null: {}, all: [] }
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  groups.name         AS group_name,\n  groups.type         AS group_type,\n  groups.announcement AS group_announcement,\n  groups.user_id      AS group_owner,\n  groups.id           AS group_id,\n  groups.uuid         AS uuid,\n  groups.allow_post   AS allow_post\nFROM\n  groups\nLEFT JOIN\n  group_user\nON\n  group_user.group_id   = groups.id\nWHERE\n  group_user.id         = 1 AND\n  group_user.is_deleted = 0 AND\n  groups.is_deleted     = 0\nORDER BY\n  groups.create_time DESC;\n"}
2017-08-02 15:29:26 +08:00: 15:29:26 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"group_name\":\"test\",\"group_type\":0,\"group_announcement\":null,\"group_owner\":1,\"group_id\":1,\"uuid\":null,\"allow_post\":0}]}"}
2017-08-02 15:47:04 +08:00: 15:47:04 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:47:28 +08:00: 15:47:28 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m66[0m {"action":"MYSQL_INFO","info":"create mysql connection pool"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  id,\n  user_id,\n  nick,\n  uuid\nFROM\n  user\nWHERE\n  user_id    = 1;\n"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"id\":2,\"user_id\":\"1\",\"nick\":\"\",\"uuid\":\"95fa3f90-7751-11e7-b872-00163e0c2f1e\"}]}"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  name\nFROM\n  permissions\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"name\":\"CREATE_GROUP\"},{\"name\":\"SEARCH_GROUP\"},{\"name\":\"APPLY_GROUP\"},{\"name\":\"GET_GROUPS\"},{\"name\":\"MODIFY_GROUP\"},{\"name\":\"DELETE_GROUP\"},{\"name\":\"POST_CONTENT\"},{\"name\":\"ASK\"},{\"name\":\"ANSWER\"},{\"name\":\"MODIFY_ANNOUNCEMENT\"},{\"name\":\"INVITE_USER\"},{\"name\":\"GET_ANNOUNCEMENT\"},{\"name\":\"GET_QUESTIONS\"}]}"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  role_id,\n  permission_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"role_id\":1,\"permission_id\":1},{\"role_id\":1,\"permission_id\":2},{\"role_id\":1,\"permission_id\":3},{\"role_id\":1,\"permission_id\":4},{\"role_id\":2,\"permission_id\":7},{\"role_id\":2,\"permission_id\":8},{\"role_id\":2,\"permission_id\":0}]}"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT \n  permission_id,\n  role_id\nFROM\n  role_permission\nWHERE\n  is_deleted = 0;\n"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"permission_id\":1,\"role_id\":1},{\"permission_id\":2,\"role_id\":1},{\"permission_id\":3,\"role_id\":1},{\"permission_id\":4,\"role_id\":1},{\"permission_id\":7,\"role_id\":2},{\"permission_id\":8,\"role_id\":2},{\"permission_id\":0,\"role_id\":2}]}"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m323[0m {"action":"MYSQL_QUERY_REQUEST","info":"\nSELECT\n  user_permission.user_id  AS user_id,\n  user_permission.role_id  AS role_id,\n  user_permission.group_id AS group_id\nFROM\n  user_permission\nWHERE\n  user_id    = 1 AND\n  is_deleted = 0;\n"}
2017-08-02 15:47:32 +08:00: 15:47:32 [32mINFO [0m [4m[36mnode_modules/fresh-mysql/index.js:[33m314[0m {"action":"MYSQL_QUERY_RESPONSE","info":"{\"data\":[{\"user_id\":1,\"role_id\":1,\"group_id\":null}]}"}
2017-08-02 15:48:16 +08:00: {}
2017-08-02 15:48:49 +08:00: {} [ undefined ] [ 1 ]
2017-08-02 15:49:10 +08:00: { undefined: undefined } 1
2017-08-02 15:49:10 +08:00: {} [ undefined ] [ 1 ]
2017-08-02 15:49:54 +08:00: [ RowDataPacket { role_id: 1, permission_id: 1 },
  RowDataPacket { role_id: 1, permission_id: 2 },
  RowDataPacket { role_id: 1, permission_id: 3 },
  RowDataPacket { role_id: 1, permission_id: 4 },
  RowDataPacket { role_id: 2, permission_id: 7 },
  RowDataPacket { role_id: 2, permission_id: 8 },
  RowDataPacket { role_id: 2, permission_id: 0 } ]
2017-08-02 15:49:54 +08:00: { undefined: undefined } 1
2017-08-02 15:49:54 +08:00: {} [ undefined ] [ 1 ]
2017-08-02 15:50:43 +08:00: [ RowDataPacket { id: 1, name: 'NORMAL' },
  RowDataPacket { id: 2, name: 'CREATOR' },
  RowDataPacket { id: 3, name: 'MEMBER' },
  RowDataPacket { id: 4, name: 'ASSISTANT_MANAGER' } ]
2017-08-02 15:50:43 +08:00: { '1': 'NORMAL',
  '2': 'CREATOR',
  '3': 'MEMBER',
  '4': 'ASSISTANT_MANAGER' } 1
2017-08-02 15:50:43 +08:00: {} [ 'NORMAL' ] [ 1 ]
2017-08-02 15:51:17 +08:00: { '1': 'NORMAL',
  '2': 'CREATOR',
  '3': 'MEMBER',
  '4': 'ASSISTANT_MANAGER' } 1
2017-08-02 15:51:56 +08:00: [ 1 ]
2017-08-02 15:52:47 +08:00: 1
2017-08-02 15:53:01 +08:00: 1
2017-08-02 15:53:37 +08:00: 1
2017-08-02 15:53:37 +08:00: { undefined: 
   [ undefined,
     undefined,
     undefined,
     undefined,
     undefined,
     undefined,
     undefined ] }
2017-08-02 15:53:58 +08:00: 1
2017-08-02 15:53:58 +08:00: { '1': [ 1, 2, 3, 4 ], '2': [ 7, 8, 0 ] }
2017-08-02 15:53:58 +08:00: [ undefined, undefined, undefined, undefined ]
2017-08-02 15:53:58 +08:00: {}
2017-08-02 15:53:58 +08:00: 12345
2017-08-02 15:53:58 +08:00: { allPermissions: [ undefined, undefined, undefined, undefined ],
  allRoles: [ 'NORMAL' ] }
2017-08-02 15:56:19 +08:00: { undefined: 'GET_QUESTIONS' }
2017-08-02 15:56:19 +08:00: {}
2017-08-02 15:56:19 +08:00: 12345
2017-08-02 15:56:19 +08:00: { allPermissions: [ undefined, undefined, undefined, undefined ],
  allRoles: [ 'NORMAL' ] }
2017-08-02 15:56:50 +08:00: {}
2017-08-02 15:56:50 +08:00: 12345
2017-08-02 15:56:50 +08:00: { allPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allRoles: [ 'NORMAL' ] }
2017-08-02 15:57:29 +08:00: ----- { allPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allRoles: [ 'NORMAL' ] }
2017-08-02 15:57:56 +08:00: ----- { allPermissions: 
   [ 'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'NORMAL' ] }
2017-08-02 15:58:39 +08:00: RowDataPacket { user_id: 1, role_id: 1, group_id: null }
2017-08-02 15:58:39 +08:00: RowDataPacket { user_id: 1, role_id: 1, group_id: null }
2017-08-02 15:58:39 +08:00: ----- { allPermissions: 
   [ 'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'NORMAL' ] }
2017-08-02 15:59:24 +08:00: ----- { '1': {},
  allPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 15:59:50 +08:00: 111 { '1': [] }
2017-08-02 15:59:50 +08:00: ----- { '1': {},
  allPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 16:00:50 +08:00: 111 { '1': [ 2 ] }
2017-08-02 16:00:50 +08:00: ----- { '1': { CREATOR: [ 'POST_CONTENT', 'ASK', undefined ] },
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     undefined,
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 16:02:29 +08:00: 222 2 1
2017-08-02 16:02:29 +08:00: 111 { '1': [ 2 ] }
2017-08-02 16:02:29 +08:00: ----- { '1': { CREATOR: [ 'POST_CONTENT', 'ASK', undefined ] },
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     undefined,
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 16:03:44 +08:00: 4444 2
2017-08-02 16:03:44 +08:00: ----- { '1': { CREATOR: [ 'POST_CONTENT', 'ASK', undefined ] },
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     undefined,
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 16:04:04 +08:00: 4444 2
2017-08-02 16:04:04 +08:00: 555 [ 'POST_CONTENT', 'ASK', undefined ]
2017-08-02 16:04:04 +08:00: 555 [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ]
2017-08-02 16:04:04 +08:00: ----- { '1': { CREATOR: [ 'POST_CONTENT', 'ASK', undefined ] },
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     undefined,
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 16:04:32 +08:00: 4444 2
2017-08-02 16:04:32 +08:00: 555 2 [ 'POST_CONTENT', 'ASK', undefined ]
2017-08-02 16:04:32 +08:00: 555 1 [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ]
2017-08-02 16:04:32 +08:00: ----- { '1': { CREATOR: [ 'POST_CONTENT', 'ASK', undefined ] },
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     undefined,
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 16:05:05 +08:00: 4444 2
2017-08-02 16:05:05 +08:00: { '1': [ 1, 2, 3, 4 ], '2': [ 7, 8, 0 ] }
2017-08-02 16:05:05 +08:00: { '1': 'CREATE_GROUP',
  '2': 'SEARCH_GROUP',
  '3': 'APPLY_GROUP',
  '4': 'GET_GROUPS',
  '5': 'MODIFY_GROUP',
  '6': 'DELETE_GROUP',
  '7': 'POST_CONTENT',
  '8': 'ASK',
  '9': 'ANSWER',
  '10': 'MODIFY_ANNOUNCEMENT',
  '11': 'INVITE_USER',
  '12': 'GET_ANNOUNCEMENT',
  '13': 'GET_QUESTIONS' }
2017-08-02 16:05:05 +08:00: 555 2 [ 'POST_CONTENT', 'ASK', undefined ]
2017-08-02 16:05:05 +08:00: { '1': [ 1, 2, 3, 4 ], '2': [ 7, 8, 0 ] }
2017-08-02 16:05:05 +08:00: { '1': 'CREATE_GROUP',
  '2': 'SEARCH_GROUP',
  '3': 'APPLY_GROUP',
  '4': 'GET_GROUPS',
  '5': 'MODIFY_GROUP',
  '6': 'DELETE_GROUP',
  '7': 'POST_CONTENT',
  '8': 'ASK',
  '9': 'ANSWER',
  '10': 'MODIFY_ANNOUNCEMENT',
  '11': 'INVITE_USER',
  '12': 'GET_ANNOUNCEMENT',
  '13': 'GET_QUESTIONS' }
2017-08-02 16:05:05 +08:00: 555 1 [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ]
2017-08-02 16:05:05 +08:00: ----- { '1': { CREATOR: [ 'POST_CONTENT', 'ASK', undefined ] },
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     undefined,
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 16:14:15 +08:00: 4444 2
2017-08-02 16:14:15 +08:00: { '1': [ 1, 2, 3, 4 ],
  '2': [ 5, 6, 9, 10, 11, 13 ],
  '3': [ 7, 8, 12, 14, 15 ],
  '4': [ 5, 9, 10, 11, 13 ] }
2017-08-02 16:14:15 +08:00: { '1': 'CREATE_GROUP',
  '2': 'SEARCH_GROUP',
  '3': 'APPLY_GROUP',
  '4': 'GET_GROUPS',
  '5': 'MODIFY_GROUP',
  '6': 'DELETE_GROUP',
  '7': 'POST_CONTENT',
  '8': 'ASK',
  '9': 'ANSWER',
  '10': 'MODIFY_ANNOUNCEMENT',
  '11': 'INVITE_USER',
  '12': 'GET_ANNOUNCEMENT',
  '13': 'GET_QUESTIONS' }
2017-08-02 16:14:15 +08:00: 555 2 [ 'MODIFY_GROUP',
  'DELETE_GROUP',
  'ANSWER',
  'MODIFY_ANNOUNCEMENT',
  'INVITE_USER',
  'GET_QUESTIONS' ]
2017-08-02 16:14:15 +08:00: { '1': [ 1, 2, 3, 4 ],
  '2': [ 5, 6, 9, 10, 11, 13 ],
  '3': [ 7, 8, 12, 14, 15 ],
  '4': [ 5, 9, 10, 11, 13 ] }
2017-08-02 16:14:15 +08:00: { '1': 'CREATE_GROUP',
  '2': 'SEARCH_GROUP',
  '3': 'APPLY_GROUP',
  '4': 'GET_GROUPS',
  '5': 'MODIFY_GROUP',
  '6': 'DELETE_GROUP',
  '7': 'POST_CONTENT',
  '8': 'ASK',
  '9': 'ANSWER',
  '10': 'MODIFY_ANNOUNCEMENT',
  '11': 'INVITE_USER',
  '12': 'GET_ANNOUNCEMENT',
  '13': 'GET_QUESTIONS' }
2017-08-02 16:14:15 +08:00: 555 1 [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ]
2017-08-02 16:14:15 +08:00: ----- { '1': 
   { CREATOR: 
      [ 'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ] },
  allPermissions: 
   [ 'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'CREATOR' ] }
2017-08-02 23:00:04 +08:00: { commonPermissions: 
   [ 'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS',
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS' ],
  allPermissions: 
   [ 'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS',
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:01:22 +08:00: [ RowDataPacket { user_id: 1, role_id: 1, group_id: null },
  RowDataPacket { user_id: 1, role_id: 3, group_id: null },
  RowDataPacket { user_id: 1, role_id: 3, group_id: null },
  RowDataPacket { user_id: 1, role_id: 2, group_id: null } ]
2017-08-02 23:01:22 +08:00: { commonPermissions: 
   [ 'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS',
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS' ],
  allPermissions: 
   [ 'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS',
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:02:34 +08:00: { commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allRoles: [ 'NORMAL' ] }
2017-08-02 23:02:50 +08:00: { commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allRoles: [ 'NORMAL' ] }
2017-08-02 23:04:02 +08:00: { '9': 
   { MEMBER: [ 'POST_CONTENT', 'ASK', 'GET_ANNOUNCEMENT', undefined, undefined ],
     groupPermissions: [ 'POST_CONTENT', 'ASK', 'GET_ANNOUNCEMENT', undefined, undefined ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     undefined,
     undefined,
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:06:44 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:06:44 +08:00: ======
2017-08-02 23:06:44 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] } null
2017-08-02 23:19:39 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:20:32 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:27:48 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:27:48 +08:00: 23:27:48 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [undefined] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:27:52 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:27:52 +08:00: 23:27:52 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [undefined] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:29:40 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:29:40 +08:00: {}
2017-08-02 23:29:40 +08:00: 23:29:40 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [undefined] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:31:50 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER' ] }
2017-08-02 23:31:50 +08:00: { groupUUID: 'a6da7acb-7793-11e7-b872-00163e0c2f1e',
  announcement: '123123' }
2017-08-02 23:31:50 +08:00: 23:31:50 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [a6da7acb-7793-11e7-b872-00163e0c2f1e] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:32:19 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     CREATOR: 
      [ 'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT',
        'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:32:19 +08:00: { groupUUID: 'a6da7acb-7793-11e7-b872-00163e0c2f1e',
  announcement: '123123' }
2017-08-02 23:32:19 +08:00: 23:32:19 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [a6da7acb-7793-11e7-b872-00163e0c2f1e] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:32:43 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     CREATOR: 
      [ 'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT',
        'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:32:43 +08:00: 23:32:43 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [a6da7acb-7793-11e7-b872-00163e0c2f1e] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:34:42 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     CREATOR: 
      [ 'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT',
        'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:34:42 +08:00: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ] '------'
2017-08-02 23:34:42 +08:00: 23:34:42 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [a6da7acb-7793-11e7-b872-00163e0c2f1e] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:35:30 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     CREATOR: 
      [ 'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT',
        'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:35:30 +08:00: undefined '===='
2017-08-02 23:35:30 +08:00: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ] '------'
2017-08-02 23:35:30 +08:00: 23:35:30 [32mINFO [0m [4m[36mnode_modules/node-cover/node_modules/co/index.js:[33m80[0m [ERROR-MIDDLEWARE] error catched, error message: [[CONTROLLER GROUP] user: [1] trying to set announcement to group: [a6da7acb-7793-11e7-b872-00163e0c2f1e] but do not have permission], item: [{"message":"no permission","code":1001,"success":false}]
2017-08-02 23:35:54 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     CREATOR: 
      [ 'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT',
        'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:35:54 +08:00: a6da7acb-7793-11e7-b872-00163e0c2f1e ====
2017-08-02 23:35:54 +08:00: [ 'POST_CONTENT',
  'ASK',
  'GET_ANNOUNCEMENT',
  'GET_CONTENTS',
  'COMMENT',
  'MODIFY_GROUP',
  'DELETE_GROUP',
  'ANSWER',
  'MODIFY_ANNOUNCEMENT',
  'INVITE_USER',
  'GET_QUESTIONS' ] '------'
2017-08-02 23:43:01 +08:00: { '9': 
   { MEMBER: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT' ],
     CREATOR: 
      [ 'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ],
     groupPermissions: 
      [ 'POST_CONTENT',
        'ASK',
        'GET_ANNOUNCEMENT',
        'GET_CONTENTS',
        'COMMENT',
        'MODIFY_GROUP',
        'DELETE_GROUP',
        'ANSWER',
        'MODIFY_ANNOUNCEMENT',
        'INVITE_USER',
        'GET_QUESTIONS' ] },
  commonPermissions: [ 'CREATE_GROUP', 'SEARCH_GROUP', 'APPLY_GROUP', 'GET_GROUPS' ],
  allPermissions: 
   [ 'POST_CONTENT',
     'ASK',
     'GET_ANNOUNCEMENT',
     'GET_CONTENTS',
     'COMMENT',
     'MODIFY_GROUP',
     'DELETE_GROUP',
     'ANSWER',
     'MODIFY_ANNOUNCEMENT',
     'INVITE_USER',
     'GET_QUESTIONS',
     'CREATE_GROUP',
     'SEARCH_GROUP',
     'APPLY_GROUP',
     'GET_GROUPS' ],
  allRoles: [ 'NORMAL', 'MEMBER', 'CREATOR' ] }
2017-08-02 23:43:01 +08:00: a6da7acb-7793-11e7-b872-00163e0c2f1e ====
2017-08-02 23:43:01 +08:00: [ 'POST_CONTENT',
  'ASK',
  'GET_ANNOUNCEMENT',
  'GET_CONTENTS',
  'COMMENT',
  'MODIFY_GROUP',
  'DELETE_GROUP',
  'ANSWER',
  'MODIFY_ANNOUNCEMENT',
  'INVITE_USER',
  'GET_QUESTIONS' ] '------'
